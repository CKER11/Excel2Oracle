using Excel2Oracle;
using ExcelHelper;
using System;
using System.Collections.Generic;
using System.Data;
using System.IO;
using System.Linq;
using System.Text;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;
using System.Xml;

namespace Excel2Oracle
{
    /// <summary>
    /// MainWindow.xaml 的交互逻辑
    /// </summary>
    public partial class MainWindow : Window
    {
        public static string templatesDirectoryName = "Templates";
        public static string exeDirectory = System.IO.Path.GetDirectoryName(System.Reflection.Assembly.GetExecutingAssembly().Location);
        public static string connectInfoFileName = "ConnectInfo.xml";
        public static string templateFilePath = "";
        public static string importedFilePath = "";
        public static AnalysisHelper.ProcessReport report;
        public static AnalysisHelper.ProcessReportClear reportClear;
        List<Source> result;
        Dictionary<string, string> contentConfig;
        List<DataTable> dataTables;
        public MainWindow()
        {
            InitializeComponent();
            this.Loaded += MainLoad;
            txtFilePath.Text = System.IO.Path.Combine(exeDirectory, @"导入文件\生产报表-大土河\01 燃料日报模板.xlsx");
        }

        private void MainLoad(object sender, RoutedEventArgs e)
        {
            this.Title = "报表数据-Oracle导入工具";
            //写进度委托加入事件
            report += WriteLineProcess;
            //清理进度委托加入事件
            reportClear += ClearProcess;
            //加载模板树
            TemplatesTreeViewLoad();
            //加载保存的关系库连接字符串
            DBConnectStringLoad();
        }

        private void DBConnectStringLoad()
        {
            try
            {
                string connectInfoPath = System.IO.Path.Combine(exeDirectory, connectInfoFileName);
                if (File.Exists(connectInfoPath))
                {
                    XmlDocument doc = new XmlDocument();
                    doc.Load(connectInfoPath);
                    XmlAttributeCollection attrs = doc.SelectSingleNode("Config").Attributes;
                    txtDBConnectInfo.Text = attrs["connectInfo"].Value;
                }
            }
            catch (Exception e)
            {
                MessageBox.Show("配置加载失败：" + e.Message);
            }
        }

        private void TemplatesTreeViewLoad()
        {
            string templatesPath = System.IO.Path.Combine(exeDirectory, templatesDirectoryName);
            if (!System.IO.Directory.Exists(templatesPath))
            {
                System.Windows.MessageBox.Show("未找到模板目录");
                return;
            }
            TemplateTreeViewItem[] allTreeNodes = ExcelFilesHelper.GetAllExcelFiles(templatesPath);
            TemplateTreeViewItem root = new TemplateTreeViewItem(NodeType.Root, templatesPath, allTreeNodes, "模板");
            root.Icon = "Images/templateRoot.jpg";
            root.IsExpanded = true;
            root.Visiblity = "Visible";
            TemplateTreeView.ItemsSource = new TemplateTreeViewItem[] { root };
        }

        private void TemplateTreeView_SelectedItemChanged(object sender, EventArgs e)
        {
            TemplateTreeViewItem item = (TemplateTreeViewItem)TemplateTreeView.SelectedItem;
            if (item.NodeType == NodeType.File)
            {
                lblCurTemplate.Content = item.DisplayName;
                templateFilePath = item.Path;
            }
            else
            {
                lblCurTemplate.Content = "未选择";
                templateFilePath = "";
            }
        }

        private void ReloadTemplates(object sender, RoutedEventArgs e)
        {
            TemplatesTreeViewLoad();
        }

        private void SelectImportedFile(object sender, EventArgs e)
        {
            Microsoft.Win32.OpenFileDialog ofd = new Microsoft.Win32.OpenFileDialog();
            ofd.DefaultExt = ".xls";
            ofd.Filter =
              "xls files (*.xls)|*.xls|xlsx files (*.xlsx)|*.xlsx";
            if (ofd.ShowDialog() == true)
            {
                txtFilePath.Text = ofd.FileName;
            }
        }
        /// <summary>
        /// 解析规则
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void AnalysisFile(object sender, EventArgs e)
        {
            string importFilePath = txtFilePath.Text.Trim();
            if (templateFilePath == "")
            {
                MessageBox.Show("模板文件未选择");
                return;
            }
            if (!File.Exists(templateFilePath))
            {
                MessageBox.Show("模板文件不存在");
                return;
            }
            //解析规则
            bool success = AnalysisHelper.Analysis(templateFilePath, report, reportClear, out result, out contentConfig);
            if (success)
            {
                lblCurRule.Content = lblCurTemplate.Content;
            }
        }

        public void WriteLineProcess(string info)
        {

            txtProcess.Text = string.Format("{0}{1}{2}", txtProcess.Text, txtProcess.Text.Trim() == "" ? "" : "\r\n", info);
        }
        public void ClearProcess()
        {
            txtProcess.Text = "";
        }
        /// <summary>
        /// 测试关系库连接字符串
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void TestDBConnect(object sender, EventArgs e)
        {
            try
            {
                object obj = OracleHelper.ExecuteScalar(txtDBConnectInfo.Text, System.Data.CommandType.Text, "select 1 from dual");
                bool result = 1 == Convert.ToInt32(obj);
                if (result)
                {
                    MessageBox.Show("连接成功");
                }
                else
                {
                    MessageBox.Show("连接失败");
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show("连接失败：" + ex.ToString());
            }
        }
        private void Import(object sender, EventArgs e)
        {
            //1.判断datatables   2，判断table存不存在
            if (dataTables != null && dataTables.Count > 0)
            {
                try
                {
                    foreach (DataTable table in dataTables)
                    {
                        string tablename = table.TableName.Substring(0, table.TableName.IndexOf("("));
                        //判断是否存在表名   show tables like 'table_name';
                        DataTable dtCheckTablename = OracleHelper.ExecuteDataTable(txtDBConnectInfo.Text, CommandType.Text, "show tables like '" + tablename + "'");
                        if (dtCheckTablename.Rows.Count > 0)
                        {
                            //存在该表，检查字段  select column_name,data_type ,data_length,data_precision,data_scale from user_tab_columns where table_name='A1';
                            string checkColumsName = "select column_name from user_tab_columns where table_name='" + tablename + "'";
                            DataTable dtColumsName = OracleHelper.ExecuteDataTable(txtDBConnectInfo.Text, CommandType.Text, checkColumsName);
                            foreach (var row in dtColumsName.Rows)
                            {

                            }  
                        }
                        else
                        {
                            //不存在该表 ，需要添加  "rcbmdj" varchar2(40) not null
                            

                        }
                        //截取tablename table（dt1）
                        foreach (DataColumn col in table.Columns)
                        {

                        }
                    }
                }
                catch (Exception ex)
                {
                    report(ex.ToString());
                }
            }
            else
            {
                MessageBox.Show("请先成功提取数据");
            }


        }
        private void ViewRules(object sender, EventArgs e)
        {

        }
        /// <summary>
        /// 获取数据
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void GetData(object sender, EventArgs e)
        {
            string importFilePath = txtFilePath.Text.Trim();
            if (importFilePath == "")
            {
                MessageBox.Show("导入文件未选择");
                return;
            }
            if (!File.Exists(importFilePath))
            {
                MessageBox.Show("导入文件不存在");
                return;
            }
            AnalysisHelper.GetDataByAnalysis(importFilePath, contentConfig, result, report, reportClear, out dataTables);

            spView.Children.Clear();
            foreach (DataTable table in dataTables)
            {
                Label lblTableName = new Label();
                lblTableName.Foreground = Brushes.Red;
                lblTableName.Content = table.TableName;
                ListView lv = new ListView();
                lv.HorizontalAlignment = HorizontalAlignment.Stretch;
                lv.VerticalAlignment = VerticalAlignment.Stretch;
                GridView gv = new GridView();
                foreach (DataColumn col in table.Columns)
                {
                    gv.Columns.Add(new GridViewColumn() { Header = col.ColumnName, DisplayMemberBinding = new Binding() { Path = new PropertyPath(col.ColumnName) } });
                }
                lv.View = gv;
                lv.ItemsSource = table.DefaultView;
                spView.Children.Add(lblTableName);
                spView.Children.Add(lv);
            }
            viewScroll.Content = spView;
        }

        private void SaveConnection(object sender, EventArgs e)
        {
            string connectInfoPath = System.IO.Path.Combine(exeDirectory, connectInfoFileName);
            File.WriteAllText(connectInfoPath, string.Format("<?xml version=\"1.0\" encoding=\"utf-8\" ?><Config  connectInfo = \"{0}\" />", txtDBConnectInfo.Text.Trim()));
            if (File.Exists(connectInfoPath))
            {
                MessageBox.Show("保存成功");
            }
        }

    }
}

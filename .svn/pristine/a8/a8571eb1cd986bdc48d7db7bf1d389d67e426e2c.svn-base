using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Shapes;
using System.Xml;

namespace Excel2Oracle
{
    /// <summary>
    /// OrclConfig.xaml 的交互逻辑
    /// </summary>
    public partial class OrclConfig : Window
    {
        public static string exeDirectory = System.IO.Path.GetDirectoryName(System.Reflection.Assembly.GetExecutingAssembly().Location);
        public static string connectInfoFileName = "ConnectInfo.xml";
        public string dBConnectInfo = "User Id={0};Password={1};Data Source=(DESCRIPTION=(ADDRESS_LIST=(ADDRESS=(PROTOCOL=TCP)(HOST={2})(PORT={3})))(CONNECT_DATA=(SERVICE_NAME={4})))";
        public string tempDBConnectInfo = "User Id={0};Password={1};Data Source=(DESCRIPTION=(ADDRESS_LIST=(ADDRESS=(PROTOCOL=TCP)(HOST={2})(PORT={3})))(CONNECT_DATA=(SERVICE_NAME={4})))";
        public OrclConfig()
        {
            InitializeComponent();
            DBConnectStringLoad();
            this.Loaded += MainLoad;
        }

        private void MainLoad(object sender, RoutedEventArgs e)
        {
            DBConnectStringLoad();
        }

        protected override void OnClosing(System.ComponentModel.CancelEventArgs e)
        {
            e.Cancel = true;
            this.Hide();
        }

        /// <summary>
        /// 保存关系库连接字符串
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void SaveConnection(object sender, EventArgs e)
        {
            
            string connectInfoPath = System.IO.Path.Combine(exeDirectory, connectInfoFileName);
            File.WriteAllText(connectInfoPath, string.Format("<?xml version=\"1.0\" encoding=\"utf-8\" ?><Config  UserId = \"{0}\" Password = \"{1}\" HOST = \"{2}\" PORT = \"{3}\" SERVICENAME = \"{4}\" />", txtUserID.Text,txtPassword.Text, txtHost.Text, txtPort.Text, txtServiceName.Text));
            if (File.Exists(connectInfoPath))
            {
                MessageBox.Show("保存成功！");
            }
            this.Hide();
        }
       
        private void DBConnectStringLoad()
        {
            try
            {
                string connectInfoPath = System.IO.Path.Combine(exeDirectory, connectInfoFileName);
                if (File.Exists(connectInfoPath))
                {
                    XmlDocument doc = new XmlDocument();
                    doc.Load(connectInfoPath);
                    XmlAttributeCollection attrs = doc.SelectSingleNode("Config").Attributes;
                    txtUserID.Text = attrs["UserId"].Value;
                    txtPassword.Text = attrs["Password"].Value;
                    txtHost.Text = attrs["HOST"].Value;
                    txtPort.Text = attrs["PORT"].Value;
                    txtServiceName.Text = attrs["SERVICENAME"].Value;
                }
            }
            catch (Exception e)
            {
                MessageBox.Show("配置加载失败：" + e.Message);
            }
        }

        /// <summary>
        /// 测试关系库连接字符串
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void TestDBConnect(object sender, EventArgs e)
        {
            try
            {
                string tempConnectInfo = tempDBConnectInfo.Replace("{0}", txtUserID.Text).Replace("{1}", txtPassword.Text).Replace("{2}", txtHost.Text).Replace("{3}", txtPort.Text).Replace("{4}", txtServiceName.Text);
                bool result = 1 == OracleHelper.ConnectionTest(tempConnectInfo);
                if (result)
                {
                    MessageBox.Show("连接成功！");
                }
                else
                {
                    MessageBox.Show("连接失败！");
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show("连接失败：" + ex.ToString());
            }
        }

        private void txtUserID_TextChanged(object sender, TextChangedEventArgs e)
        {
            dBConnectInfo = dBConnectInfo.Replace("{0}",txtUserID.Text);
        }

        private void txtPassword_TextChanged(object sender, TextChangedEventArgs e)
        {
            dBConnectInfo = dBConnectInfo.Replace("{1}", txtPassword.Text);
        }

        private void txtHost_TextChanged(object sender, TextChangedEventArgs e)
        {
            dBConnectInfo = dBConnectInfo.Replace("{2}", txtHost.Text);
        }

        private void txtPort_TextChanged(object sender, TextChangedEventArgs e)
        {
            dBConnectInfo = dBConnectInfo.Replace("{3}", txtPort.Text);
        }

        private void txtServiceName_TextChanged(object sender, TextChangedEventArgs e)
        {
            dBConnectInfo = dBConnectInfo.Replace("{4}", txtServiceName.Text);
        }

        private void btnCancel_Click(object sender, RoutedEventArgs e)
        {
            this.Hide();
        }
    }
}

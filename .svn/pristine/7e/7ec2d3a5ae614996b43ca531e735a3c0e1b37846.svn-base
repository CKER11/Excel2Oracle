using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using NPOI.SS.UserModel;
using NPOI.XSSF.UserModel;
using NPOI.HSSF.UserModel;
using System.IO;
using System.Data;
using System.Windows;

namespace ExcelHelper
{
    public class ExcelHelper : IDisposable
    {
        private string fileName = null; //文件名
        private IWorkbook workbook = null;
        private FileStream fs = null;
        private bool disposed;

        public ExcelHelper(string fileName)
        {
            this.fileName = fileName;
            disposed = false;
        }

        internal Dictionary<string, string> ReadAllContentText(string sheetName = null)
        {
            Dictionary<string, string> dic = new Dictionary<string, string>();
            try
            {
                ISheet sheet = null;
                fs = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                if (fileName.Trim().IndexOf(".xlsx") > 0) // 2007版本
                    workbook = new XSSFWorkbook(fs);
                else if (fileName.Trim().IndexOf(".xls") > 0) // 2003版本
                    workbook = new HSSFWorkbook(fs);
                if (sheetName != null)
                {
                    sheet = workbook.GetSheet(sheetName);
                    //如果没有找到指定的sheetName对应的sheet，则尝试获取第一个sheet
                    if (sheet == null)
                        sheet = workbook.GetSheetAt(0);
                }
                else
                {
                    sheet = workbook.GetSheetAt(0);
                }
                if (sheet != null)
                {
                    IRow headerRow = sheet.GetRow(0);
                    //最后一个方格的编号 即总的列数
                    int colNum = headerRow.LastCellNum;
                    //最后一行的标号  即总的行数
                    int rowNum = sheet.LastRowNum;
                    for (int i = 0; i <= rowNum; i++)
                    {
                        IRow row = sheet.GetRow(i);
                        if (row == null)
                        {
                            continue;
                        }
                        int cellCount = row.Cells.Count;
                        for (int j = 0; j < cellCount; j++)
                        {
                            ICell cell = row.Cells[j];
                            string value = GetValueByType(cell, cell.CellType);
                            if (cell.CellType != CellType.Blank && value.Trim() != string.Empty)
                            {
                                string key = string.Format("{0}-{1}", cell.RowIndex + 1, cell.ColumnIndex + 1);
                                dic[key] = value.Trim();
                            }
                        }
                    }

                }
                return dic;
            }
            catch (Exception ex)
            {
                //Console.WriteLine("Exception: " + ex.Message);
                MessageBox.Show("Exception: " + ex.Message);
                return dic;
            }
        }

        private string GetValueByType(ICell cell, CellType cellType)
        {
            switch (cellType)
            {
                case CellType.Unknown:
                    return cell.StringCellValue;
                case CellType.Numeric:
                    if (cell.NumericCellValue == 43273 && cell.DateCellValue != null)
                        return cell.DateCellValue.ToString("yyyy-MM-dd HH:mm:ss");
                    return cell.NumericCellValue.ToString();
                case CellType.String:
                    return cell.StringCellValue;
                case CellType.Formula:
                    return cell.CellFormula;
                case CellType.Blank:
                    return string.Empty;
                case CellType.Boolean:
                    return cell.BooleanCellValue.ToString();
                case CellType.Error:
                    return cell.ErrorCellValue.ToString();
                default:
                    return string.Empty;
            }
        }

        /// <summary>
        /// 数字转字母，用于excel列
        /// </summary>
        /// <param name="index"></param>
        /// <param name="isLower"></param>
        /// <returns></returns>
        public static string NumToAlpha(int index, bool isLower = true)
        {
            index--;
            List<string> chars = new List<string>();
            do
            {
                if (chars.Count > 0) index--;
                chars.Insert(0, ((char)(index % 26 + (int)(isLower ? 'a' : 'A'))).ToString());
                index = (int)((index - index % 26) / 26);
            } while (index > 0);
            return String.Join(string.Empty, chars.ToArray());
        }
        /// <summary>
        /// 将DataTable数据导入到excel中
        /// </summary>
        /// <param name="data">要导入的数据</param>
        /// <param name="isColumnWritten">DataTable的列名是否要导入</param>
        /// <param name="sheetName">要导入的excel的sheet的名称</param>
        /// <returns>导入数据行数(包含列名那一行)</returns>
        public int DataTableToExcel(DataTable data, string sheetName, bool isColumnWritten)
        {
            int i = 0;
            int j = 0;
            int count = 0;
            ISheet sheet = null;

            fs = new FileStream(fileName, FileMode.OpenOrCreate, FileAccess.ReadWrite);
            if (fileName.IndexOf(".xlsx") > 0) // 2007版本
                workbook = new XSSFWorkbook();
            else if (fileName.IndexOf(".xls") > 0) // 2003版本
                workbook = new HSSFWorkbook();

            try
            {
                if (workbook != null)
                {
                    sheet = workbook.CreateSheet(sheetName);
                }
                else
                {
                    return -1;
                }

                if (isColumnWritten == true) //写入DataTable的列名
                {
                    IRow row = sheet.CreateRow(0);
                    for (j = 0; j < data.Columns.Count; ++j)
                    {
                        row.CreateCell(j).SetCellValue(data.Columns[j].ColumnName);
                    }
                    count = 1;
                }
                else
                {
                    count = 0;
                }

                for (i = 0; i < data.Rows.Count; ++i)
                {
                    IRow row = sheet.CreateRow(count);
                    for (j = 0; j < data.Columns.Count; ++j)
                    {
                        row.CreateCell(j).SetCellValue(data.Rows[i][j].ToString());
                    }
                    ++count;
                }
                workbook.Write(fs); //写入到excel
                return count;
            }
            catch (Exception ex)
            {
                Console.WriteLine("Exception: " + ex.Message);
                return -1;
            }
        }

        /// <summary>
        /// 将excel中的数据导入到DataTable中
        /// </summary>
        /// <param name="sheetName">excel工作薄sheet的名称</param>
        /// <param name="isFirstRowColumn">第一行是否是DataTable的列名</param>
        /// <returns>返回的DataTable</returns>
        public DataTable ExcelToDataTable(string sheetName, bool isFirstRowColumn)
        {
            ISheet sheet = null;
            DataTable data = new DataTable();
            int startRow = 0;
            try
            {
                fs = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                if (fileName.IndexOf(".xlsx") > 0) // 2007版本
                    workbook = new XSSFWorkbook(fs);
                else if (fileName.IndexOf(".xls") > 0) // 2003版本
                    workbook = new HSSFWorkbook(fs);

                if (sheetName != null)
                {
                    sheet = workbook.GetSheet(sheetName);
                    if (sheet == null) //如果没有找到指定的sheetName对应的sheet，则尝试获取第一个sheet
                    {
                        sheet = workbook.GetSheetAt(0);
                    }
                }
                else
                {
                    sheet = workbook.GetSheetAt(0);
                }
                if (sheet != null)
                {
                    IRow firstRow = sheet.GetRow(0);
                    int cellCount = firstRow.LastCellNum; //一行最后一个cell的编号 即总的列数

                    if (isFirstRowColumn)
                    {
                        for (int i = firstRow.FirstCellNum; i < cellCount; ++i)
                        {
                            ICell cell = firstRow.GetCell(i);
                            if (cell != null)
                            {
                                string cellValue = cell.StringCellValue;
                                if (cellValue != null)
                                {
                                    DataColumn column = new DataColumn(cellValue);
                                    data.Columns.Add(column);
                                }
                            }
                        }
                        startRow = sheet.FirstRowNum + 1;
                    }
                    else
                    {
                        startRow = sheet.FirstRowNum;
                    }

                    //最后一列的标号
                    int rowCount = sheet.LastRowNum;
                    for (int i = startRow; i <= rowCount; ++i)
                    {
                        IRow row = sheet.GetRow(i);
                        if (row == null) continue; //没有数据的行默认是null　　　　　　　

                        DataRow dataRow = data.NewRow();
                        for (int j = row.FirstCellNum; j < cellCount; ++j)
                        {
                            if (row.GetCell(j) != null) //同理，没有数据的单元格都默认是null
                                dataRow[j] = row.GetCell(j).ToString();
                        }
                        data.Rows.Add(dataRow);
                    }
                }

                return data;
            }
            catch (Exception ex)
            {
                Console.WriteLine("Exception: " + ex.Message);
                return null;
            }
        }

        public void Dispose()
        {
            Dispose(true);
            GC.SuppressFinalize(this);
        }

        protected virtual void Dispose(bool disposing)
        {
            if (!this.disposed)
            {
                if (disposing)
                {
                    if (fs != null)
                        fs.Close();
                }

                fs = null;
                disposed = true;
            }
        }

        internal Dictionary<string, string> ReadAllContent(string sheetName = null)
        {
            Dictionary<string, string> dic = new Dictionary<string, string>();
            try
            {
                ISheet sheet = null;
                fs = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                if (fileName.Trim().IndexOf(".xlsx") > 0) // 2007版本
                    workbook = new XSSFWorkbook(fs);
                else if (fileName.Trim().IndexOf(".xls") > 0) // 2003版本
                    workbook = new HSSFWorkbook(fs);
                if (sheetName != null)
                {
                    sheet = workbook.GetSheet(sheetName);
                    //如果没有找到指定的sheetName对应的sheet，则尝试获取第一个sheet
                    if (sheet == null)
                        sheet = workbook.GetSheetAt(0);
                }
                else
                {
                    sheet = workbook.GetSheetAt(0);
                }
                if (sheet != null)
                {
                    //所有的无内容的合并单元格
                    List<ExcelPosition> mergeCellKeyDic = new List<ExcelPosition>();
                    //所有的有内容的合并单元格
                    List<ExcelPosition> mergeCellKeyFirstDic = new List<ExcelPosition>();
                    IRow headerRow = sheet.GetRow(0);
                    //最后一个方格的编号 即总的列数
                    int colNum = headerRow.LastCellNum;
                    //最后一行的标号  即总的行数
                    int rowNum = sheet.LastRowNum;
                    for (int i = 0; i <= rowNum; i++)
                    {
                        IRow row = sheet.GetRow(i);
                        if (row == null)
                        {
                            continue;
                        }
                        int cellCount = row.Cells.Count;
                        for (int j = 0; j < cellCount; j++)
                        {
                            ICell cell = row.Cells[j];
                            string value = GetValueByType(cell, cell.CellType);
                            string key = string.Format("{0}-{1}", cell.RowIndex + 1, cell.ColumnIndex + 1);
                            dic[key] = value.Trim();
                            if (cell.IsMergedCell && value.Trim() == "")
                                mergeCellKeyDic.Add(new ExcelPosition
                                {
                                    rowIndex = cell.RowIndex + 1,
                                    colIndex = cell.ColumnIndex + 1,
                                });
                            if (cell.IsMergedCell && value.Trim() != "")
                                mergeCellKeyFirstDic.Add(new ExcelPosition
                                {
                                    rowIndex = cell.RowIndex + 1,
                                    colIndex = cell.ColumnIndex + 1,
                                });
                        }
                    }
                    //将空白的合并单元格的值赋值为合并单元格首个单元格的值
                    if (mergeCellKeyDic.Count > 0)
                    {
                        List<MergedCell> mergedCells = GetMergedCell(mergeCellKeyDic,mergeCellKeyFirstDic);
                        foreach (MergedCell MergedCell in mergedCells)
                        {
                            if (MergedCell.Cells.Count <= 1)
                                continue;
                            for (int i = 1; i < MergedCell.Cells.Count; i++)
                            {
                                ExcelPosition cell = MergedCell.Cells[0];
                                ExcelPosition thisCell = MergedCell.Cells[i];
                                string valueKey = string.Format("{0}-{1}", cell.rowIndex, cell.colIndex);
                                string thisKey = string.Format("{0}-{1}", thisCell.rowIndex, thisCell.colIndex);
                                dic[thisKey] = dic[valueKey];
                            }
                        }
                    }
                }
                return dic;
            }
            catch (Exception ex)
            {
                if (ex.Message.IndexOf("指定的参数已超出有效值的范围。")>=0)
                {
                    MessageBox.Show("Exception: Excel打开失败，如果是WPS保存的Excel文件，请使用Microsoft Office Excel重新保存");
                    return dic;
                }
                MessageBox.Show("Exception: " + ex.Message);
                return dic;
            }
        }
        /// <summary>
        /// 倒序获取所有合并单元格
        /// </summary>
        /// <param name="mergeCellKeyDic"></param>
        /// <param name="mergeCellKeyFirstDic"></param>
        /// <returns></returns>
        private List<MergedCell> GetMergedCell(List<ExcelPosition> mergeCellKeyDic,List<ExcelPosition> mergeCellKeyFirstDic)
        {
            List<MergedCell> result = new List<MergedCell>() { };
            if (mergeCellKeyFirstDic.Count == 0)
            {
                return result;
            }
            ExcelPosition ep = new ExcelPosition()
            {
                rowIndex = mergeCellKeyFirstDic.Last().rowIndex ,
                colIndex = mergeCellKeyFirstDic.Last().colIndex
            };
            GetMergedGroup(ep, mergeCellKeyDic, mergeCellKeyFirstDic, ref result);
            return result;
        }

        private void GetMergedGroup(ExcelPosition ep, List<ExcelPosition> mergeCellKeyDic, List<ExcelPosition> mergeCellKeyFirstDic, ref List<MergedCell> result)
        {
            int row = ep.rowIndex;
            int col = ep.colIndex;
            List<ExcelPosition> group = new List<ExcelPosition>() { };
            group.Add(new ExcelPosition() { rowIndex = row, colIndex = col });
            List<int> colCollection = new List<int>() { };
            do
            {
                col++;
                bool hasNext = mergeCellKeyDic.Count(x => x.rowIndex == row && x.colIndex == col) > 0;
                if (hasNext)
                {
                    group.Add(new ExcelPosition() { rowIndex = row, colIndex = col });
                    colCollection.Add(col);
                }
                else
                    break;
                   
            } while (true);
            row = ep.rowIndex;
            col = ep.colIndex;
            do
            {
                row++;
                bool hasNext = mergeCellKeyDic.Count(x => x.rowIndex == row && x.colIndex == col) > 0;
                if (hasNext)
                {
                    group.Add(new ExcelPosition() { rowIndex = row, colIndex = col });
                    foreach (int item in colCollection)
                    {
                        group.Add(new ExcelPosition() { rowIndex = row, colIndex = item });
                    }
                }
                else
                    break;
            } while (true);
            result.Add(new MergedCell { Cells = group });
            foreach (var item in group)
            {
               var removeItem = mergeCellKeyDic.Find(x=> x.rowIndex == item.rowIndex && x.colIndex == item.colIndex);
                if (removeItem != null )
                {
                    mergeCellKeyDic.Remove(removeItem);
                }
            }
            if (mergeCellKeyDic.Count > 0)
            {
                mergeCellKeyFirstDic.RemoveAt(mergeCellKeyFirstDic.Count - 1);
                if (mergeCellKeyFirstDic.Count == 0)
                    return;
                ep = new ExcelPosition()
                {
                    rowIndex = mergeCellKeyFirstDic.Last().rowIndex,
                    colIndex = mergeCellKeyFirstDic.Last().colIndex
                };
                GetMergedGroup(ep, mergeCellKeyDic, mergeCellKeyFirstDic,ref result);
            }
        }
    }
}